
- Print the pairs with result 0

    <?php
    $input = array (3, 6, -3, 5, -10, 3, 10, 1, 7, -1, -9, -8, 7, 7, -7, -2, -7);
    $length = count($input) - 1;
    $count = 0;
    for ($i = 0; $i <= $length; $i++){
        $flag[$i]=0;
    }

    for ($i = 0; $i <= $length; $i++) {
        for ($j = $i + 1; $j <= $length; $j++) {
            if ($input[$i] + $input[$j] == 0 && $flag[$i]==0 && $flag[$j]==0) {
                $count++;
                $flag[$i]=1;
                $flag[$j]=1;
            }
        }
    }

    echo $count;

    ?>

- Print the pairs count without repeating

    <?php
    $input = array ('G','R','B','R','R','R','G','G');
    $length = count($input) - 1;
    $count = 0;
    $check = [];

    for ($i = 0; $i <= $length; $i++) {
        for ($j = $i + 1; $j <= $length; $j++) {
            if ($input[$i] == $input[$j] && !in_array($input[$i], $check)) {
                $count++;
                array_push($check,$input[$i]);
            }
        }
    }

    echo $count;
    ?>

- Search an element from sorted array using binary search

    <?php

    function binarySearch(Array $arr, $x)
    {
        // check for empty array
        if (count($arr) === 0) return false;
        $low = 0;
        $high = count($arr) - 1;

        while ($low <= $high) {

            // compute middle index
            $mid = floor(($low + $high) / 2);

            // element found at mid
            if($arr[$mid] == $x) {
                return true;
            }

            if ($x < $arr[$mid]) {
                // search the left side of the array
                $high = $mid -1;
            }
            else {
                // search the right side of the array
                $low = $mid + 1;
            }
        }

        // If we reach here element x doesnt exist
        return false;
    }

    // Driver code
    $arr = array(1, 2, 3, 4, 5);
    $value = 5;
    if(binarySearch($arr, $value) == true) {
        echo $value." Exists";
    }
    else {
        echo $value." Doesnt Exist";
    }
    ?>

- Remove duplicates from sorted array

    <?php
    function remove_duplicates_list($list1) {
      $nums_unique = array_values(array_unique($list1));
      return $nums_unique ;
    }
    $nums = array(1,1,2,2,3,4,5,5);
    print_r(remove_duplicates_list($nums));
    ?>

- To check whether the page is called from 'https' or 'http'.

    <?php
    if (!empty($_SERVER['HTTPS']))
    {
      echo 'https is enabled';
    }
    else
    {
    echo 'http is enabled'."\n";
    }
    ?>

- Write a PHP program to check whether a number is an Armstrong number or not. Return true if the number is Armstrong otherwise return false.
    An Armstrong number of three digits is an integer so that the sum of the cubes of its digits is equal to the number itself. For example, 153 is an Armstrong number since 1**3 + 5**3 + 3**3 = 153

    Another: 1634 = 1^4 + 6^4 + 3^4 + 4^4 = 1 + 1296 + 81 + 256 = 1634

    <?php

    function armstrong_number($num) {
      $sl = strlen($num);
      $sum = 0;
      $num = (string)$num;
      for ($i = 0; $i < $sl; $i++) {
        $sum = $sum + pow((string)$num{$i},$sl);
      }
      if ((string)$sum == (string)$num) {
        return "True";
      } else {
        return "False";
      }
    }
    echo "Is 153 Armstrong number? ".armstrong_number(153);
    echo "\nIs 21 Armstrong number? ".armstrong_number(21);
    echo "\nIs 4587 Armstrong number? ".armstrong_number(4587);"\n";
    ?>

- Fibonacci series

    <?php
    $count = 0 ;
    $f1 = 0;
    $f2 = 1;
    echo $f1." , ";
    echo $f2." , ";
    while ($count < 20 )
    {
        $f3 = $f2 + $f1 ;
        echo $f3." , ";
        $f1 = $f2 ;
        $f2 = $f3 ;
        $count = $count + 1;
    }
    ?>

    Using recursion:-

    <?php
        $num = 10;
        echo "<h3>Fibonacci series using recursive function:</h3>";
        echo "\n";
        /* Recursive function for fibonacci series. */
        function series($num){
            if($num == 0){
                return 0;
            }
            else if($num == 1){
                return 1;
            }
            else {
                return (series($num-1) + series($num-2));
            }
        }
        /* Call Function. */
        for ($i = 0; $i < $num; $i++){
            echo series($i);
            echo "\n";
        }
    ?>
