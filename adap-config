import React, { useState } from 'react';
import { Button, TextField, MenuItem, Box, Grid, InputLabel, FormControl, Select, CircularProgress, FormLabel, FormControlLabel, Radio, Typography, Switch, Snackbar, Alert } from '@mui/material';
import RadioGroup from '@mui/material/RadioGroup';
import { useLocation, useNavigate } from 'react-router-dom';
import { jsonApi } from '../../ApiConfig/apiService';
import ArrowBackIcon from '@mui/icons-material/ArrowBack';
import CloseIcon from '@mui/icons-material/Close';
import ArrowForwardIcon from '@mui/icons-material/ArrowForward';
import AutoAwesomeIcon from '@mui/icons-material/AutoAwesome';


// Helper function to extract state from location
const useQuery = () => {
  const { state } = useLocation();
  return state || {};
};

const Configure = () => {
  const query = useQuery();
  const [programming_language, setProgramming_language] = useState('');
  const [target_system, setTarget_system] = useState('');
  const [build_tool, setBuild_tool] = useState('');
  const [connection_Type, setConnection_Type] = useState('');
  const [target_system_apiHost, setTarget_system_apiHost] = useState('');
  const [addAuthLayer, setAddAuthLayer] = useState(false);
  const [authVariant, setAuthVariant] = useState('');
  const [authType, setAuthType] = useState('');
  const [authToken, setAuthToken] = useState('');
  const [clientId, setClientId] = useState('');
  const [clientSecret, setClientSecret] = useState('');
  const [authGrantType, setAuthGrantType] = useState('');
  const [authScope, setAuthScope] = useState('');
  const [keyValuePairs, setKeyValuePairs] = useState([{ key: "username", value: "" }, { key: "password", value: "" }]);
  const [authUrl, setAuthUrl] = useState('');
  const [basicAuthUsername, setBasicAuthUsername] = useState('');
  const [basicAuthPassword, setBasicAuthPassword] = useState('');
  const [urlEncoding, setUrlEncoding] = useState(false);
  const [groupId, setGroupId] = useState('');
  const [version, setVersion] = useState('');
  const [loader, setLoader] = useState(false);
  const [showError, setShowError] = useState(false);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleBack = () => {
    navigate('/adaptor/view-yaml');
  };

  const handleChange = (index, field, newValue) => {
    const updatedPairs = [...keyValuePairs];
    updatedPairs[index][field] = newValue;
    setKeyValuePairs(updatedPairs);
  };

  const handleAddPair = () => {
    setKeyValuePairs([...keyValuePairs, { key: "", value: "" }]);
  };

  const handleRemovePair = (index) => {
    const updatedPairs = keyValuePairs.filter((_, i) => i !== index);
    setKeyValuePairs(updatedPairs);
  };

  const handleAddAuth = (event) => {
    const { name, value, checked } = event.target;

    setAddAuthLayer(checked);
  };

  const handleCloseSnackbar = () => {
    setShowError(false);
  };

  const convertToCredentialsObject = () => {
    if (authVariant === "static" && authType === "basic") {
      return {
        username:basicAuthUsername,
        password:basicAuthPassword
      }
    }

    return keyValuePairs.reduce((obj, pair) => {
      obj[pair.key] = pair.value;
      return obj;
    }, {});
  };

  const handleContinue = async () => {
    try {
      setLoader(true);
      const response = await jsonApi.post('/api/store-form-data', {
        ...query.query,
        programming_language,
        target_system,
        build_tool,
        connection_Type,
        target_system_apiHost,
        groupId,
        version,
        basePath: "/v3",
        applicationTargetPath: process.env.REACT_APP_SERVICE_GENERATE_PATH,
        controllersPackage: groupId + ".controllers",
        code_gen_type: "adapter",
        add_auth_layer: addAuthLayer,
        access_token_variant: authVariant,
        auth_config:{
          is_token_cached:false,
          www_url_encoding_required:urlEncoding,
          token_url:authUrl,
          token_type:authType,
          token: authToken,
          credentials:convertToCredentialsObject(),
          client_id: clientId,
          client_secret: clientSecret,
          authorization_grant_type: authGrantType,
          scope: authScope,
          token_validity: 3600,
        },
        accessToken: {
          tokenKeyValuePair: {
            variant: authVariant,
            type: authType,
            token: authToken
          }
        },
        dataModel: "flexible"
      });
      if (response) {
        const finalResponse = await jsonApi.post('/api/run-generator');
        localStorage.setItem('projectData', JSON.stringify(finalResponse.data));
        navigate('/adaptor/project-view', { state: { ...query } });
      }
    } catch (err) {
      console.error('Error configuring:', err);
      setError(`Generator returned unexpected errror, ${err.message}`);
      setShowError(true);
    } finally {
      setLoader(false);
    }
  };

  return (
    <Box sx={{ flexGrow: 1, p: 3, display: 'flex', flexDirection: 'column', height: '89vh', overflow: 'auto' }}>
      <Typography variant="h4" sx={{ mb: 3 }}>Configure</Typography>
    <Box>
      <div className="swagger-card">
        {query.query &&
        <Box display="flex" width="100%" className="configure-link-tab" style={{border:'1px solid',padding:'5px',display:'grid',marginTop:'10px'}}>
          <div>
            <InputLabel style={{ fontSize:"14px", fontWeight:"600"}}>File Name:</InputLabel>
            <p>{query.query.swaggerDocumentPath}</p>
          </div>
        </Box>
        }
        <Box>
          <Box>

            <FormControl fullWidth margin="normal">
              <InputLabel style={{ backgroundColor:"white"}}>Programming Language</InputLabel>
              <Select
                value={programming_language}
                onChange={(e) => setProgramming_language(e.target.value)}
              >
                <MenuItem value="java">Java 17</MenuItem>
                <MenuItem value="NodeJs">Nodejs</MenuItem>
              </Select>
            </FormControl>

            {programming_language === "java" && (
              <FormControl fullWidth margin="normal">
                <TextField
                  label="Group Id"
                  variant="outlined"
                  fullWidth
                  margin="normal"
                  value={groupId}
                  onChange={(e) => setGroupId(e.target.value)}
                />
              </FormControl>
            )}

            <FormControl fullWidth margin="normal">
              <TextField
                label="Version"
                variant="outlined"
                fullWidth
                margin="normal"
                value={version}
                onChange={(e) => setVersion(e.target.value)}
              />
            </FormControl>

            {programming_language === "java" && (
              <FormControl fullWidth margin="normal">
                <InputLabel style={{ backgroundColor:"white"}}>Build Tool</InputLabel>
                <Select
                  value={build_tool}
                  onChange={(e) => setBuild_tool(e.target.value)}
                >
                  <MenuItem value="maven">Maven</MenuItem>
                </Select>
              </FormControl>
            )}

            <FormControl fullWidth margin="normal">
              <InputLabel style={{ backgroundColor:"white"}}>Connection Type</InputLabel>
              <Select
                value={connection_Type}
                onChange={(e) => setConnection_Type(e.target.value)}
              >
                <MenuItem value="RESTful">RESTful</MenuItem>
              </Select>
            </FormControl>

            <FormControl fullWidth margin="normal">
              <InputLabel style={{ backgroundColor:"white"}}>API Host</InputLabel>
              <Select
                value={target_system_apiHost}
                onChange={(e) => setTarget_system_apiHost(e.target.value)}
              >
                <MenuItem value="http://localhost:8020/v3">http://localhost:8020</MenuItem>
                <MenuItem value="http://localhost:3001">http://localhost:3001</MenuItem>
              </Select>
            </FormControl>

            <FormControl fullWidth margin="normal">
              <TextField
                label="Target System"
                variant="outlined"
                fullWidth
                margin="normal"
                value={target_system}
                onChange={(e) => setTarget_system(e.target.value)}
              />
            </FormControl>

          </Box>

          <Box>

            {/* Show authentication fields if 'Yes' is selected for authentication */}
            {target_system !== "" && (
              <Box mt={2}>
                <h4>{target_system} Connector</h4>
                <FormControl fullWidth margin="normal">
                  <InputLabel>Auth Variant</InputLabel>
                  <Select
                    value={authVariant}
                    onChange={(e) => setAuthVariant(e.target.value)}
                  >
                    <MenuItem value="static">Static</MenuItem>
                    <MenuItem value="dynamic">Dynamic</MenuItem>
                    <MenuItem value="withCredentials">With Credentials</MenuItem>
                  </Select>
                </FormControl>

                <FormControl fullWidth margin="normal">
                  <InputLabel>Is WWWUrlEncoding Required?</InputLabel>
                  <Select
                    value={urlEncoding}
                    onChange={(e) => setUrlEncoding(e.target.value)}
                  >
                    <MenuItem value="yes">Yes</MenuItem>
                    <MenuItem value="no">No</MenuItem>
                  </Select>
                </FormControl>

                <FormControl fullWidth margin="normal">
                  <InputLabel>Auth Type</InputLabel>
                  <Select
                    value={authType}
                    onChange={(e) => setAuthType(e.target.value)}
                  >
                    <MenuItem value="basic">Basic</MenuItem>
                    <MenuItem value="jwt">JWT</MenuItem>
                    <MenuItem value="bearer">Bearer</MenuItem>
                  </Select>
                </FormControl>

                {authVariant === "static" && authType !== "basic" && (
                <FormControl fullWidth margin="normal">
                  <TextField
                    label="Token"
                    variant="outlined"
                    fullWidth
                    value={authToken}
                    onChange={(e) => setAuthToken(e.target.value)}
                  />
                </FormControl>
                )}

                {authVariant === "static" && authType === "basic" && (
                <>
                <FormControl fullWidth margin="normal">
                  <TextField
                    label="Username"
                    variant="outlined"
                    fullWidth
                    value={basicAuthUsername}
                    onChange={(e) => setBasicAuthUsername(e.target.value)}
                  />
                </FormControl>

                <FormControl fullWidth margin="normal">
                  <TextField
                    label="Password"
                    variant="outlined"
                    fullWidth
                    value={basicAuthPassword}
                    onChange={(e) => setBasicAuthPassword(e.target.value)}
                  />
                </FormControl>
                </>
                )}

                {authVariant === "dynamic" && (
                <>

                <FormControl fullWidth margin="normal">
                  <TextField
                    label="URL"
                    variant="outlined"
                    fullWidth
                    value={authUrl}
                    onChange={(e) => setAuthUrl(e.target.value)}
                  />
                </FormControl>

                <FormControl fullWidth margin="normal">
                  <TextField
                    label="Client ID"
                    variant="outlined"
                    fullWidth
                    value={clientId}
                    onChange={(e) => setClientId(e.target.value)}
                  />
                </FormControl>

                <FormControl fullWidth margin="normal">
                  <TextField
                    label="Client Secret"
                    variant="outlined"
                    fullWidth
                    value={clientSecret}
                    onChange={(e) => setClientSecret(e.target.value)}
                  />
                </FormControl>

                <FormControl fullWidth margin="normal">
                  <TextField
                    label="Authorization grant type"
                    variant="outlined"
                    fullWidth
                    value={authGrantType}
                    onChange={(e) => setAuthGrantType(e.target.value)}
                  />
                </FormControl>

                <FormControl fullWidth margin="normal">
                  <TextField
                    label="Scope"
                    variant="outlined"
                    fullWidth
                    value={authScope}
                    onChange={(e) => setAuthScope(e.target.value)}
                  />
                </FormControl>
                </>
                )}

              </Box>
            )}

            {authVariant === "withCredentials" && (
            <>
              <Button variant="outlined" className="global-back-button-style" onClick={handleAddPair}>
                Add Pair
              </Button>

              {keyValuePairs.map((pair, index) => (
                <Grid container spacing={2} alignItems="center"  mt={1} key={index}>
                  <Grid item xs={4}>
                    <FormControl fullWidth>
                      <TextField
                        label="Key"
                        variant="outlined"
                        value={pair.key}
                        onChange={(e) => handleChange(index, 'key', e.target.value)}
                      />
                    </FormControl>
                  </Grid>

                  <Grid item xs={4}>
                    <FormControl fullWidth>
                      <TextField
                        label="Value"
                        variant="outlined"
                        value={pair.value}
                        onChange={(e) => handleChange(index, 'value', e.target.value)}
                      />
                    </FormControl>
                  </Grid>

                  <Grid item xs={4}>
                    <Button
                      variant="outlined"
                      className="global-back-button-style"
                      onClick={() => handleRemovePair(index)}
                      fullWidth
                    >
                      Remove
                    </Button>
                  </Grid>
                </Grid>
              ))}

            </>
            )}

            {/* <FormControl fullWidth margin="normal">
              <FormLabel>Authenticate the endpoints</FormLabel>
              <RadioGroup
                row
                value={addAuthLayer}
                onChange={(e) => setAddAuthLayer(e.target.value)}
              >
                <FormControlLabel value="Yes" control={<Radio />} label="Yes" />
                <FormControlLabel value="No" control={<Radio />} label="No" />
              </RadioGroup>
            </FormControl> */}

                    {/* Add Authentication Toggle */}
        <FormControlLabel
          control={
            <Switch
              checked={addAuthLayer}
              onChange={handleAddAuth}
              name="addAuthentication"
            />
          }
          label="Add Authentication to Adapter endpoints"
        />
          </Box>
        </Box>
      </div>
      {/* Action Buttons */}
      <Box sx={{ mt: 'auto', display: 'flex', justifyContent: 'space-between' }}>
          <Button variant="outlined" sx={{ color: "black", border: "1px solid black" }}>
            Cancel <CloseIcon />
          </Button>
          <Box sx={{ display: 'flex', flexDirection: "row", gap: 2 }}>
              <Button variant="outlined" sx={{ color: "black", border: "1px solid black" }} onClick={handleBack}>
                Back <ArrowBackIcon />
              </Button>
              <Button variant="contained" onClick={handleContinue} sx={{
                backgroundColor: '#006E74',
                color: 'white',
                '&:hover': {
                  backgroundColor: '#004F52'
                }
              }}>
                Generate Code <ArrowForwardIcon />
              </Button>
              {loader && (
          <CircularProgress
            size={30}
            style={{ marginTop: "0px", marginLeft: "20px" }}
          />
        )}
          </Box>
        </Box>
    </Box>

      <Snackbar
        open={showError}
        autoHideDuration={6000}
        onClose={handleCloseSnackbar}
        anchorOrigin={{ vertical: 'top', horizontal: 'right' }} // Positioning here
      >
        <Alert
          onClose={handleCloseSnackbar}
          severity="error"
          sx={{ backgroundColor: 'black', color: 'white' }} // Custom styles here
        >
          {error}
        </Alert>
      </Snackbar>

    </Box>
  );
};

export default Configure;
